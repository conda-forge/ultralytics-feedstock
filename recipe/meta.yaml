{% set name = "ultralytics" %}
{% set version = "8.0.128" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/ultralytics-{{ version }}.tar.gz
  sha256: a2f72b8a8af15c244e8ee04beafb69b930208b7c842f23c0b6ac02aa5199bc96

build:
  entry_points:
    - yolo = ultralytics.yolo.cfg:entrypoint
    - ultralytics = ultralytics.yolo.cfg:entrypoint
  noarch: python
  script: {{ PYTHON }} -m pip install . -vv
  number: 0

requirements:
  host:
    - python >=3.7
    - pip
  run:
    - python >=3.7
    - matplotlib-base >=3.2.2
    - opencv >=4.6.0
    - pillow >=7.1.2
    - pyyaml >=5.3.1
    - requests >=2.23.0
    - scipy >=1.4.1
    - pytorch >=1.7.0
    - torchvision >=0.8.1
    - tqdm >=4.64.0
    - pandas >=1.1.4
    - seaborn >=0.11.0
    - psutil

test:
  imports:
    - ultralytics
  commands:
    - pip check
    - yolo --help
    - ultralytics --help
  requires:
    - pip

about:
  home: https://ultralytics.com
  summary: Ultralytics YOLOv8 for SOTA object detection, multi-object tracking, instance segmentation, pose estimation and image classification.
  doc_url: https://docs.ultralytics.com
  dev_url: https://github.com/ultralytics/ultralytics
  license: AGPL-3.0-only
  license_file: LICENSE
  description: |
    ![Ultralytics YOLOv8 banner](https://raw.githubusercontent.com/ultralytics/assets/main/yolov8/banner-yolov8.png)

    [Ultralytics](https://ultralytics.com) [YOLOv8](https://github.com/ultralytics/ultralytics) is a cutting-edge, state-of-the-art (SOTA) model that builds upon the success of previous YOLO versions and introduces new features and improvements to further boost performance and flexibility. YOLOv8 is designed to be fast, accurate, and easy to use, making it an excellent choice for a wide range of object detection and tracking, instance segmentation, image classification and pose estimation tasks.

    We hope that the resources here will help you get the most out of YOLOv8. Please browse the YOLOv8 <a href="https://docs.ultralytics.com/">Docs</a> for details, raise an issue on <a href="https://github.com/ultralytics/ultralytics/issues/new/choose">GitHub</a> for support, and join our <a href="https://discord.gg/2wNGbc6g9X">Discord</a> community for questions and discussions!

    To request an Enterprise License please complete the form at [Ultralytics Licensing](https://ultralytics.com/license).

    ![Ultralytics YOLOv8 comparison plots](https://raw.githubusercontent.com/ultralytics/assets/main/yolov8/yolo-comparison-plots.png)

    ## Documentation

    See below for a quickstart installation and usage example, and see the [YOLOv8 Docs](https://docs.ultralytics.com) for full documentation on training, validation, prediction and deployment.
    
    <details open>
    <summary>Install</summary>
    
    Conda install the ultralytics package including all [requirements](https://github.com/ultralytics/ultralytics/blob/main/requirements.txt) in a [**Python>=3.8**](https://www.python.org/) environment with [**PyTorch>=1.7**](https://pytorch.org/get-started/locally/).
        
    ```bash
    conda install ultralytics
    ```
    
    For alternative installation methods including Pip, Docker, and Git, please refer to the [Quickstart Guide](https://docs.ultralytics.com/quickstart).
    
    </details>
    
    <details open>
    <summary>Usage</summary>
    
    #### CLI
    
    YOLOv8 may be used directly in the Command Line Interface (CLI) with a `yolo` command:
    
    ```bash
    yolo predict model=yolov8n.pt source='https://ultralytics.com/images/bus.jpg'
    ```
    
    `yolo` can be used for a variety of tasks and modes and accepts additional arguments, i.e. `imgsz=640`. See the YOLOv8 [CLI Docs](https://docs.ultralytics.com/usage/cli) for examples.
    
    #### Python
    
    YOLOv8 may also be used directly in a Python environment, and accepts the same [arguments](https://docs.ultralytics.com/usage/cfg/) as in the CLI example above:
    
    ```python
    from ultralytics import YOLO
    
    # Load a model
    model = YOLO("yolov8n.yaml")  # build a new model from scratch
    model = YOLO("yolov8n.pt")  # load a pretrained model (recommended for training)
    
    # Use the model
    results = model.train(data="coco128.yaml", epochs=3)  # train the model
    results = model.val()  # evaluate model performance on the validation set
    results = model("https://ultralytics.com/images/bus.jpg")  # predict on an image
    results = model.export(format="onnx")  # export the model to ONNX format
    ```
    
    [Models](https://github.com/ultralytics/ultralytics/tree/main/ultralytics/models) download automatically from the latest Ultralytics [release](https://github.com/ultralytics/assets/releases). See YOLOv8 [Python Docs](https://docs.ultralytics.com/usage/python) for more examples.
    
    </details>

extra:
  recipe-maintainers:
    - glenn-jocher
    - AyushExel
    - Laughing-q
    - abraha2d
